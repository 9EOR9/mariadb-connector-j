resources:
  containers:

    - container: ubuntu-1604
      image: ubuntu:16.04
      options: "--name ubuntu-1604 --add-host=mariadb.example.com:127.0.0.1 -v /usr/bin/docker:/tmp/docker:ro"

    - container: ubuntu-1804
      image: ubuntu:18.04
      options: "--name ubuntu-1804 --add-host=mariadb.example.com:127.0.0.1 -v /usr/bin/docker:/tmp/docker:ro"

jobs:

  - job: SSLFiles
    displayName: 'Creating SSL Files'
    pool:
      vmImage: 'ubuntu-16.04'
      container: $[ variables['containerImage'] ]
    steps:
      - script: |
          java --version
          mkdir tmp
          .travis/gen-ssl.sh mariadb.example.com tmp
          ls -lrt tmp
          cp -R tmp $BUILD_ARTIFACTSTAGINGDIRECTORY
        displayName: 'create SSL certificates'

      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: ssl_certs

  - job: windowsTest
    displayName: 'test windows'
    pool:
      vmImage: 'win1803'
    dependsOn:
      - SSLFiles
    steps:
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: ssl_certs
          targetPath: $(System.DefaultWorkingDirectory)

      - task: DownloadPipelineArtifact@1
        displayName: 'Download 10.4 enterprise server artifact files'
        inputs:
          buildType: 'specific'
          project: '6d15af64-176c-496d-b583-fd2ae21d4df4'
          pipeline: 'mariadb-corporation.MariaDBEnterprise'
          branchName: 'refs/heads/10.4-enterprise'
          artifactName: Windows
          definition: '3'
          downloadPath: $(System.DefaultWorkingDirectory)
          #buildVersionToDownload: 'latest'
          buildVersionToDownload: 'specific'
          buildId: 373
      - script: |
          choco install jdk8 -ia "INSTALLDIR=""c:\java"""
          type C:\ProgramData\chocolatey\logs\chocolatey.log
          Get-EnvironmentVariable -Name 'JAVA_HOME' -Scope 'Machine'
          choco install maven
          echo %PATH%
          echo %JAVA_HOME%
          refreshenv
          echo %PATH%
          echo %JAVA_HOME%
        displayName: 'install java + maven'

      - script: |
          msiexec /i $(System.DefaultWorkingDirectory)\win_build\win\packaging\mariadb-10.4.5-winx64.msi INSTALLDIR=c:\projects\server SERVICENAME=mariadb ALLOWREMOTEROOTACCESS=true /qn
          c:\projects\server\bin\mysql.exe -e "create database testj" --user=root
        displayName: 'install server'

      - script: |
          echo 127.0.0.1 mariadb.example.com >> %WINDIR%\System32\Drivers\Etc\Hosts
          dir
        displayName: 'set hostname'

      - script: |
          set JAVA_HOME=C:\java\
          set PATH=%PATH%;%JAVA_HOME%\bin
          java -version
          C:\ProgramData\chocolatey\bin\mvn -version
          C:\ProgramData\chocolatey\bin\mvn clean test -DdbUrl="jdbc:mariadb://mariadb.example.com:3306/testj?user=root" -DkeystorePath="$(System.DefaultWorkingDirectory)/tmp/client-keystore.jks" -DkeystorePassword="kspass" -DserverCertificatePath="$(System.DefaultWorkingDirectory)/tmp/server.crt" -Dkeystore2Path="$(System.DefaultWorkingDirectory)/tmp/fullclient-keystore.jks" -Dkeystore2Password="kspass" -DkeyPassword="kspasskey" -Dkeystore2PathP12="$(System.DefaultWorkingDirectory)/tmp/fullclient-keystore.p12" -DrunLongTest=false
        displayName: 'run tests'


  - job: RunInContainer
    pool:
      vmImage: 'ubuntu-16.04'
    dependsOn:
      - SSLFiles
    strategy:
      matrix:
        ubuntu-1604:
          containerImage: ubuntu-1604
          containerName: xenial
        ubuntu-1804:
          containerImage: ubuntu-1804
          containerName: bionic

    container: $[variables['containerImage']]

    steps:

      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: ssl_certs
          targetPath: $(System.DefaultWorkingDirectory)

      - script: /tmp/docker exec -t -u 0 $(containerImage) sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        displayName: Set up sudo

      - task: DownloadPipelineArtifact@1
        displayName: 'Download 10.4 enterprise server artifact files'
        inputs:
          buildType: 'specific'
          downloadPath: $(System.DefaultWorkingDirectory)
          project: '6d15af64-176c-496d-b583-fd2ae21d4df4'
          pipeline: 'mariadb-corporation.MariaDBEnterprise'
          artifactName: $(containerImage)
          branchName: 'refs/heads/10.4-enterprise'
          #buildVersionToDownload: 'latest'
          definition: '3'
          buildVersionToDownload: 'specific'
          buildId: 373

      - task: DownloadPipelineArtifact@1
        displayName: 'Download galera server artifact files'
        inputs:
          buildType: 'specific'
          downloadPath: $(System.DefaultWorkingDirectory)
          project: '6d15af64-176c-496d-b583-fd2ae21d4df4'
          pipeline: 'mariadb-corporation.es-galera'
          artifactName: $(containerImage)
          branchName: 'refs/heads/es-mariadb-4.x'
          #buildVersionToDownload: 'latest'
          definition: '2'
          buildVersionToDownload: 'specific'
          buildId: 337

      - script: |
          ls -lrt .
          echo "Installing server from deb"
          sudo ln -fs /usr/share/zoneinfo/UTC /etc/localtime
          rm -R mariadb-plugin*
          rm -R *-dev.deb
          rm -R *-test.deb
          chmod 777 .

          sudo apt-get update && sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates tzdata pwgen
          export DEBIAN_FRONTEND="noninteractive"
          sudo debconf-set-selections <<< "mariadb-server-10.4 mysql-server/root_password password !Passw0rd"
          sudo debconf-set-selections <<< "mariadb-server-10.4 mysql-server/root_password_again password !Passw0rd"
          sudo apt-get update -y

          sudo apt-get install --allow-unauthenticated -y curl libdbi-perl rsync socat libnuma1 libaio1 zlib1g-dev libreadline5 libjemalloc1 libsnappy1v5 libcrack2 gawk lsof psmisc libaio1 perl libreadline5

          echo 'Installing deb files'
          sudo apt install -f -y ./*.deb

          sudo ls -lrt /etc/mysql/
          sudo bash -c 'echo "ssl-ca=$(System.DefaultWorkingDirectory)/tmp/ca.crt" >> /etc/mysql/mariadb-enterprise.cnf'
          sudo bash -c 'echo "ssl-cert=$(System.DefaultWorkingDirectory)/tmp/server.crt" >> /etc/mysql/mariadb-enterprise.cnf'
          sudo bash -c 'echo "ssl-key=$(System.DefaultWorkingDirectory)/tmp/server.key" >> /etc/mysql/mariadb-enterprise.cnf'
          sudo tail -n 500 /etc/mysql/mariadb-enterprise.cnf

          sudo service mysql restart

        displayName: 'install server'

      - script: |
          sudo mysql -e "CREATE USER 'root'@'%' identified by 'Passw@rd2';"
          sudo mysql -e "GRANT ALL on *.* to 'root'@'%' identified by 'Passw@rd2' with grant option;"
          sudo mysql -e "CREATE DATABASE testj;"
        displayName: 'Add non socket user'

      - script: |
          sudo apt install -y default-jdk
          sudo apt install -y maven
          mvn -version
          java -version
        displayName: 'Install java + maven'

      - script: |
          ls -lrt /usr/share/maven/bin/
          /usr/share/maven/bin/mvn clean test -DdbUrl="jdbc:mariadb://mariadb.example.com:3306/testj?user=root&password=Passw@rd2" -DkeystorePath="$(System.DefaultWorkingDirectory)/tmp/client-keystore.jks" -DkeystorePassword="kspass" -DserverCertificatePath="$(System.DefaultWorkingDirectory)/tmp/server.crt" -Dkeystore2Path="$(System.DefaultWorkingDirectory)/tmp/fullclient-keystore.jks" -Dkeystore2Password="kspass" -DkeyPassword="kspasskey" -Dkeystore2PathP12="$(System.DefaultWorkingDirectory)/tmp/fullclient-keystore.p12" -DrunLongTest=false
        env:
          JAVA_HOME: "/usr/lib/jvm/default-java"
          MAVEN_HOME: "/opt/maven"
        displayName: 'run tests'